In order to build and develop a domain specific language, we should analyze how the features will look like based on functionalities that it supposed to provide. This includes which are ,s, if it will have start and end of the program and all rules that will give the possibilities to understand and write clean code.
All SPET ,s are lowercase except two NewWord, that define start and end of the program, which means that it is a case-sensitive language. For example Start is a , that highlight the start of the program, but start is a NewWord, that our program will find in a text, also this means that we cannot look for Start as a search NewWord,.
The reserved NewWord, are: Start, End, lookFor, find, findL, findR, count, replace. White spaces may appear only as a NewWord, line between ,s, it is defined as one or more spaces, tabs and line-breaking. Only after , start and end can be white space, for another identifiers, space between them will be interpreted as one string, for example oldman and old man are one string, but not two for the last.
For defining the lexer of DSL, we should make the grammar for it in a general form, which may be done by identification of all terminal and nonterminal character. In NewWord,er to classify all of them, we divide them into two sets, after which the derivation from nonterminal in terminal will be done.
Meta-notation:
<program>

Start

X*

X+,

Means program is a nonterminal.

(in bold font) means that Start is a terminal / a token or a part of token

Means zero or more occurrences of X.

A comma-separated list of one or more xâ€™s.

Separate alternatives.



Algoritmi:
1.Procesare unui text bufferReaderToList;